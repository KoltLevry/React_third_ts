.mytask_02-wrapper {
  background-color: lightgray;
  height: 100%;
  padding: 20px;
  border-radius: 2px;
}

@counter-style custom-counter {
    system: numeric;
    symbols: "★" "☆";
    /* symbols: "★"; */
    suffix: " ";
}

.myCar_Task-box ul {
    list-style: custom-counter;
    counter-reset: custom-counter;
}

@counter-style roman-style {
    system: additive;
    symbols: I V X L C D M;
    additive-symbols: 1000 M, 500 D, 100 C, 50 L, 10 X, 5 V, 1 I;
}

.mySkills_Task-box ul {
    list-style: roman-style;
}

@keyframes slideIn {
    from {
      transform: translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .element {
    animation: slideIn 1s ease-in-out;
  }

  /* Створи анімацію, яка змінює колір кнопки з червоного на зелений за 3 секунди. */

  @keyframes colorChange {
    0% {
      background-color: red;
    }
    100% {
      background-color: green;
    }
  }
  
  .element_2-0, .intro-box button {
    animation: colorChange 3s ease-in-out;
  }
  


/* @-webkit-keyframes{} - alt */

/* @charset{} */
/* ~Зазвичай використовується для встановлення кодування, наприклад, UTF-8. */
/* 
Затребуваність:
Середня. Частіше автоматично задається.

Частота використання:
Рідко (зазвичай задається сервером або IDE).

@charset "UTF-8"; | @charset "ISO-8859-1"; 
 */

/* @counter-style{} */
/* 
Правило @counter-style було представлено в CSS3. Воно дозволяє створювати власні стилі для лічильників (нумерацій списків), замість стандартних (наприклад, decimal, roman, disc).
Затребуваність:
Середня, залежно від потреби у кастомізації.

Частота використання:
Рідко, у випадках, коли потрібно створити унікальний стиль списку.

Рівень використання:
Середній.
@counter-style custom-counter {
  system: numeric;
  symbols: "★" "☆";
  suffix: " ";
}

ul {
  list-style: custom-counter;
  counter-reset: custom-counter;
}

*/

/* @font-face {
    дозволяє підключати власні шрифти на вебсайт.
} */
/* 
Сфера задіяння:
Веб-дизайн, для використання унікальних шрифтів.

Затребуваність:
Висока.

Частота використання:
Часто.

Рівень використання:
Базовий.
*/

/* @font-feature-values {} */
/* 
Воно використовується для налаштування шрифтових функцій, таких як лігатури, варіації символів тощо.

Опис:
@font-feature-values дозволяє задавати параметри для шрифтів, які підтримують додаткові функції OpenType.

Дії:
Контролює додаткові можливості шрифтів (наприклад, старовинний стиль цифр).
Сфера задіяння:
Робота з професійними шрифтами, що підтримують OpenType.

Затребуваність:
Середня (залежить від дизайну).

Частота використання:
Рідко.

Рівень використання:
Просунутий.
*/

/* @import {} - alt modisch*/
/* 
Одне з найстаріших правил CSS, представлене в CSS1. Воно дозволяє імпортувати зовнішні CSS-файли до поточного.

Опис:
@import додає стильові файли до документа.

Дії:
Підключає зовнішні CSS-файли.
Допомагає розділяти стилі на модулі.
Сфера задіяння:
Організація стилів у великих проєктах.

Затребуваність:
Середня, хоча у багатьох випадках замінено на <link> у HTML.

Частота використання:
Рідко.

Рівень використання:
Базовий.

Приклад 1:
css
Копіювати
Редагувати
@import url("styles.css");
Приклад 2:
css
Копіювати
Редагувати
@import url("https://example.com/theme.css");
*/

/* @layer {} - important!  */
/*  !
@layer — це нова функція, представлена в CSS для управління порядком застосування стилів. Доступна лише в сучасних браузерах.

Опис:
@layer дозволяє організовувати стилі у шари та визначати, які з них мають вищий пріоритет.

Дії:
Контролює порядок застосування стилів.
Запобігає конфліктам у великих проєктах.
Сфера задіяння:
Великі CSS-проєкти.

Затребуваність:
Висока (для сучасних проєктів).

Частота використання:
Поступово набирає популярність.

Рівень використання:
Просунутий.

Приклад 1:
css
Копіювати
Редагувати
@layer base {
  body {
    margin: 0;
  }
}

@layer utilities {
  .text-center {
    text-align: center;
  }
}
Приклад 2:
css
Копіювати
Редагувати
@layer theme {
  h1 {
    color: blue;
  }
}
Завдання:
Створи два шари: один для базових стилів (загальний вигляд сторінки), інший — для стилів кнопок.
*/

/* @page {} - рьь = hmm */
/* ^
Правило @page було введено в CSS2 для управління стилями друку, особливо корисно для роботи з PDF або іншими форматами, які генеруються з веб-сторінок.

Опис:
@page використовується для стилізації сторінок при друці. Воно дозволяє змінювати властивості, такі як поля (margins), орієнтацію сторінки (portrait/landscape) і розмір сторінки.

Дії:
Налаштовує поля для друку.
Дозволяє стилізувати першу сторінку окремо.
Встановлює розмір паперу.
Сфера задіяння:
Друк веб-сторінок, створення PDF-документів.

Затребуваність:
Середня у проєктах, де потрібен друкований формат.

Частота використання:
Рідко, але дуже важливе в певних ситуаціях.

Рівень використання:
Середній.

Приклад 1:
css
Копіювати
Редагувати
@page {
  margin: 2cm;
}
Приклад 2:
css
Копіювати
Редагувати
@page :first {
  margin: 1cm;
  size: A4 landscape;
}
*/

/* 
@property — відносно нове правило в CSS, яке з’явилося у специфікаціях CSS Houdini. Воно дозволяє створювати кастомні CSS-властивості (змінні) із заданими параметрами.

Опис:
@property використовується для визначення спеціальних змінних, які можна використовувати з анімаціями або для складних стилів.

Дії:
Дозволяє задавати тип, початкове значення та інші параметри для кастомних властивостей.
Сфера задіяння:
Сучасні вебдизайн-проєкти.

Затребуваність:
Низька (через обмежену підтримку в браузерах).

Частота використання:
Рідко.

Рівень використання:
Просунутий.

Приклад 1:
css
Копіювати
Редагувати
@property --main-color {
  syntax: '<color>';
  initial-value: blue;
  inherits: true;
}

div {
  color: var(--main-color);
}
Приклад 2:
css
Копіювати
Редагувати
@property --spacing {
  syntax: '<length>';
  initial-value: 10px;
  inherits: false;
}

p {
  margin-top: var(--spacing);
}
*/

/* 
Правило @namespace з’явилося в CSS3. Воно використовується для управління просторами імен XML-документів, які мають унікальні ідентифікатори.
Опис:
@namespace застосовується для стилізації елементів із певним простором імен.
Дії:
Задає простори імен для XML-документів.
Дозволяє використовувати унікальні селектори.
Сфера задіяння:
XML-документи та SVG.

Затребуваність:
Низька.

Частота використання:
Рідко.

Рівень використання:
Просунутий.

Приклад 1:
css
Копіювати
Редагувати
@namespace url(http://www.w3.org/2000/svg);

circle {
  fill: red;
}
Приклад 2:
css
Копіювати
Редагувати
@namespace svg url(http://www.w3.org/2000/svg);

svg|circle {
  fill: blue;
;,;
*/
/*! @media {} */
/* 
Історія:
Одне з найпопулярніших правил, представлене в CSS2.1. Воно дозволяє створювати адаптивні стилі для різних пристроїв і умов.

Опис:
@media використовується для застосування стилів залежно від ширини екрану, роздільної здатності тощо.

Дії:
Створює адаптивний дизайн.
Додає стилі для мобільних пристроїв, планшетів тощо.
Сфера задіяння:
Адаптивний вебдизайн.

Затребуваність:
Висока.

Частота використання:
Дуже часто.

Рівень використання:
Базовий.

Приклад 1:
css
Копіювати
Редагувати
@media (max-width: 600px) {
  body {
    background-color: lightblue;
  }
}
Приклад 2:
css
Копіювати
Редагувати
@media (orientation: landscape) {
  body {
    font-size: 18px;
  }
}
*/
/* ! @keyframes{} */
/* !
Опис: Використовується для створення анімацій. З його допомогою можна задати послідовність змін властивостей елементів на різних етапах анімації.
Сфера застосування: Інтерактивні елементи на вебсайтах, рекламні банери, покращення користувацького досвіду через динамічні ефекти.
Частота використання: Дуже висока, особливо в сучасному вебдизайні, щоб створювати плавні переходи та візуальні ефекти.
Рівень використання: Для всіх рівнів – від початківця до просунутого.
Приклад:

css
Копіювати
Редагувати
@keyframes slideIn {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.element {
  animation: slideIn 1s ease-in-out;
}
*/

